const express = require("express");
const router = express.Router();
const Activity = require("../models/Activity");
const auth = require("../middleware/auth"); // Middleware for authentication

// Fetch all activities for the logged-in user
router.get("/", auth, async (req, res) => {
  try {
    const activities = await Activity.find({ userId: req.user.id });
    res.json(activities);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Start activity
router.post("/:id/start", auth, async (req, res) => {
  try {
    const activity = await Activity.findById(req.params.id);
    if (!activity)
      return res.status(404).json({ message: "Activity not found" });
    if (activity.userId.toString() !== req.user.id)
      return res.status(401).json({ message: "Not authorized" });

    activity.status = "Ongoing";
    activity.startTime = Date.now();
    await activity.save();

    res.json(activity);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// End activity
router.post("/:id/end", async (req, res) => {
  try {
    const activity = await Activity.findById(req.params.id);
    if (!activity)
      return res.status(404).json({ message: "Activity not found" });
    if (activity.userId.toString() !== req.user.id)
      return res.status(401).json({ message: "Not authorized" });

    activity.status = "Completed";
    activity.duration += Math.floor(
      (Date.now() - new Date(activity.startTime)) / 1000
    );
    activity.startTime = null;
    await activity.save();

    res.json(activity);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Resume activity
router.post("/:id/resume", auth, async (req, res) => {
  try {
    const activity = await Activity.findById(req.params.id);
    if (!activity)
      return res.status(404).json({ message: "Activity not found" });
    if (activity.userId.toString() !== req.user.id)
      return res.status(401).json({ message: "Not authorized" });

    const pausedDuration = activity.duration;
    activity.status = "Ongoing";
    activity.startTime = Date.now() - pausedDuration * 1000;
    await activity.save();

    res.json(activity);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// Pause activity
router.post("/:id/pause", auth, async (req, res) => {
  try {
    const activity = await Activity.findById(req.params.id);
    if (!activity)
      return res.status(404).json({ message: "Activity not found" });
    if (activity.userId.toString() !== req.user.id)
      return res.status(401).json({ message: "Not authorized" });

    activity.status = "Paused";
    activity.duration += Math.floor(
      (Date.now() - new Date(activity.startTime)) / 1000
    );
    activity.startTime = null;
    await activity.save();

    res.json(activity);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

module.exports = router;
